<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASE-Assignment</name>
    </assembly>
    <members>
        <member name="T:ASE_Assignment.Circle">
            <summary>
            Circle: Used to instanciate circle objects with valid parameters
            </summary>
        </member>
        <member name="M:ASE_Assignment.Circle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Circle object constructor
            </summary>
            <param name="colour">Fill colour</param>
            <param name="penColour">Outline colour</param>
            <param name="x">X Location</param>
            <param name="y">Y Location</param>
            <param name="radius">radius integer</param>
        </member>
        <member name="M:ASE_Assignment.Circle.calcArea">
            <summary>
            Calculates the area of the circle
            </summary>
            <returns>Area as double</returns>
        </member>
        <member name="M:ASE_Assignment.Circle.calcPerimeter">
            <summary>
            Calculates the Perimeter of the circle
            </summary>
            <returns>Perimeter as double</returns>
        </member>
        <member name="M:ASE_Assignment.Circle.Draw(System.Drawing.Graphics)">
            <summary>
            Draw given circle onto a panel
            </summary>
            <param name="g">Graphics panel to draw onto</param>
        </member>
        <member name="T:ASE_Assignment.Command">
            <summary>
            Command: Command object containing line and type.
            </summary>
        </member>
        <member name="T:ASE_Assignment.InternalException">
            <summary>
            All exceptions are based off of this to allow catching of internal exceptions but not software breaking ones.
            </summary>
        </member>
        <member name="T:ASE_Assignment.TrianglePosException">
            <summary>
            Exception thrown if triangle command does not receive integers or variables
            </summary>
        </member>
        <member name="T:ASE_Assignment.RectangleArgsException">
            <summary>
            Exception thrown if rectangle command does not receive integers or variables
            </summary>
        </member>
        <member name="T:ASE_Assignment.FillArgsException">
            <summary>
            Exception thrown if fill command does not receive on/off
            </summary>
        </member>
        <member name="T:ASE_Assignment.CircleArgsException">
            <summary>
            Exception thrown if circle command does not receive integers or variables
            </summary>
        </member>
        <member name="T:ASE_Assignment.MoveArgsException">
            <summary>
            Exception thrown if move command does not receive integers or variables
            </summary>
        </member>
        <member name="T:ASE_Assignment.DrawArgsException">
            <summary>
            Exception thrown if draw command does not receive integers or variables
            </summary>
        </member>
        <member name="T:ASE_Assignment.InvalidCommandException">
            <summary>
            Exception thrown when an unknown command is entered.
            </summary>
        </member>
        <member name="T:ASE_Assignment.NoSuchVariableException">
            <summary>
            Exception thrown when a variable does not exist
            </summary>
        </member>
        <member name="T:ASE_Assignment.IfSyntaxException">
            <summary>
            Exception thrown when if syntax is incorrect
            </summary>
        </member>
        <member name="T:ASE_Assignment.VariableValueException">
            <summary>
            Exception thrown when variable value is set to data type other than integer
            </summary>
        </member>
        <member name="T:ASE_Assignment.OperationArgsException">
            <summary>
            Exception thrown when an operation command does not contain enough arguments
            </summary>
        </member>
        <member name="T:ASE_Assignment.MethodNotFoundException">
            <summary>
            Exception thrown when a method that doesn't exist is accessed
            </summary>
        </member>
        <member name="T:ASE_Assignment.InvalidOperatorException">
            <summary>
            Exception thrown when an invalid operator is entered
            </summary>
        </member>
        <member name="T:ASE_Assignment.Looper">
            <summary>
            Class that manages loop functions
            </summary>
        </member>
        <member name="M:ASE_Assignment.Looper.LoopChecker(System.String)">
            <summary>
            Check the syntax of a loop command and derive the correct values from the arguments
            </summary>
            <param name="loopCommand">The given command containing the loop</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ASE_Assignment.Looper.LoopParse(System.Int32,System.Int32,System.String,System.String)" -->
        <member name="M:ASE_Assignment.Looper.LoopParse(ASE_Assignment.Variable,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="op"></param>
            <param name="command"></param>
        </member>
        <member name="M:ASE_Assignment.Looper.LoopParse(ASE_Assignment.Variable,ASE_Assignment.Variable,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="op"></param>
            <param name="command"></param>
        </member>
        <member name="M:ASE_Assignment.Looper.LoopRun">
            <summary>
            The function ran during the while loop.
            </summary>
        </member>
        <member name="T:ASE_Assignment.Method">
            <summary>
            Method object, contains method name, list of commands and run function
            </summary>
        </member>
        <member name="M:ASE_Assignment.Method.methodRun">
            <summary>
            Run the given method through the parser and pointer
            </summary>
        </member>
        <member name="T:ASE_Assignment.Parser">
            <summary>
            Parser: Class parses all operation commands such as IF, VAR, LOOP, METHOD, END.
            </summary>
        </member>
        <member name="M:ASE_Assignment.Parser.IsMethod(System.String,System.String@)">
            <summary>
            Check if command is a method and method already exists
            </summary>
            <param name="command">The command entered</param>
            <param name="methodName">Output the existing method or creates new one</param>
            <returns>Syntax validity of method command</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsIf(System.String)">
            <summary>
            Check if command is a valid if statement.
            </summary>
            <param name="command">The command entered</param>
            <returns>Syntax validity of if command</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsVar(System.String)">
            <summary>
            Checks syntax and creates or modifys variable
            </summary>
            <param name="command">The command entered</param>
            <returns>Syntax validity of var command</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsRunMethod(System.String)">
            <summary>
            See if command entered is a run function and process it accordingly
            </summary>
            <param name="command">The command entered</param>
            <returns>Syntax validity of runMethod command</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.ModifyVar(System.String)">
            <summary>
            Syntax parsing method for modifcation of variable values
            </summary>
            <param name="command">The command entered</param>
        </member>
        <member name="M:ASE_Assignment.Parser.ComplexModifyVar(System.Int32,System.Int32,ASE_Assignment.Variable,System.String)">
            <summary>
            Method for the modification of variables values with data passed from ModifyVar function
            </summary>
            <param name="v1">Integer 1</param>
            <param name="v2">Integer 2</param>
            <param name="v">The variable being modified</param>
            <param name="op">Numerical operator to use in equation</param>
        </member>
        <member name="M:ASE_Assignment.Parser.FindVar(System.String)">
            <summary>
            Method for finding existing variable from variableList
            </summary>
            <param name="s">Variable name</param>
            <returns>Variable found</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.FindMethod(System.String)">
            <summary>
            Function for finding existing method from variableList
            </summary>
            <param name="s">Method name</param>
            <returns>Method found</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsLoop(System.String)">
            <summary>
            Checks loop command syntax
            </summary>
            <param name="command">The command entered</param>
            <returns>Syntax validity of loop command</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsEndIf(System.String)">
            <summary>
            Checks for end command
            </summary>
            <param name="command">Command entered</param>
            <returns>Syntax validity</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsEndLoop(System.String)">
            <summary>
            Checks for end command
            </summary>
            <param name="command">Command entered</param>
            <returns>Syntax validity</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.IsEndMethod(System.String)">
            <summary>
            Checks for end command
            </summary>
            <param name="command">Command entered</param>
            <returns>Syntax validity</returns>
        </member>
        <member name="M:ASE_Assignment.Parser.ClearVar">
            <summary>
            Clears the variable list
            </summary>
        </member>
        <member name="M:ASE_Assignment.Parser.ClearMethods">
            <summary>
            Clears the method list
            </summary>
        </member>
        <member name="M:ASE_Assignment.Parser.checkVarInt(System.String,System.Int32@)">
            <summary>
            Function derived from Int.tryParse. Checks if string is either integer or an existing variable
            </summary>
            <param name="argument">The string to check</param>
            <param name="result">Output the integer or variable value</param>
            <returns>Possibility of finding integer</returns>
        </member>
        <member name="T:ASE_Assignment.Pointer">
            <summary>
            Pointer: This class parses the commands given by the user and instructs the turtle pointer how to react accordingly.
            </summary>
        </member>
        <member name="F:ASE_Assignment.Pointer.invalidBox">
            <summary>
            The invalid command box in the window.
            </summary>
        </member>
        <member name="F:ASE_Assignment.Pointer.consoleBox">
            <summary>
            The console box object in the window.
            </summary>
        </member>
        <member name="M:ASE_Assignment.Pointer.Init(System.Windows.Forms.PictureBox,System.Drawing.Graphics,System.Windows.Forms.Label,System.Windows.Forms.TextBox)">
            <summary>
            Initialises the pointer object.
            </summary>
            <param name="picture">The pointer on the graphics screen</param>
            <param name="graphics">The graphics screen itself</param>
            <param name="invalid">Invalid commands box</param>
            <param name="cb">Console output box.</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.Instruct(System.String)">
            <summary>
            Function for parsing commands through the pointer.
            </summary>
            <param name="command">The command to parse.</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.Move(System.Int32,System.Int32)">
            <summary>
            Move the turtle to the given X and Y coordinate
            </summary>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.Draw(System.Int32,System.Int32,System.Drawing.Graphics)">
            <summary>
            Draw a line from the pointer to the co-ord given.
            </summary>
            <param name="x">X Postion</param>
            <param name="y">Y Position</param>
            <param name="g">Graphics panel to draw the line on</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.AddConsoleBox(System.String)">
            <summary>
            Adds a line to the console box
            </summary>
            <param name="line">Adds a line to the console box.</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.ClearConsoleBox">
            <summary>
            Clears the console box
            </summary>
        </member>
        <member name="M:ASE_Assignment.Pointer.AddInvalidBox(System.String)">
            <summary>
            Adds a line to the invalid command box.
            </summary>
            <param name="line">The line to add to the text box</param>
        </member>
        <member name="M:ASE_Assignment.Pointer.ClearInvalidBox">
            <summary>
            Clears the invalid command box
            </summary>
        </member>
        <member name="T:ASE_Assignment.Program">
            <summary>
            Program: Main class that starts the application
            </summary>
        </member>
        <member name="M:ASE_Assignment.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
        <member name="T:ASE_Assignment.Rect">
            <summary>
            Rect: Used to instanciate rectangle objects with valid parameters
            </summary>
        </member>
        <member name="M:ASE_Assignment.Rect.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rectangle object constructor
            </summary>
            <param name="colour">Fill colour</param>
            <param name="penColour">Outline colour</param>
            <param name="x">X Location</param>
            <param name="y">Y Location</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
        </member>
        <member name="M:ASE_Assignment.Rect.calcArea">
            <summary>
            Calculates the area of the rectangle
            </summary>
            <returns>Area as double</returns>
        </member>
        <member name="M:ASE_Assignment.Rect.calcPerimeter">
            <summary>
            Calculates the Perimeter of the rectangle
            </summary>
            <returns>Perimeter as double</returns>
        </member>
        <member name="M:ASE_Assignment.Rect.Draw(System.Drawing.Graphics)">
            <summary>
            Draw given rectangle onto a panel
            </summary>
            <param name="g">Graphics panel to draw onto</param>
        </member>
        <member name="T:ASE_Assignment.Shape">
            <summary>
            Shape: Basic shape class that is used by other classes for inheritance
            </summary>
        </member>
        <member name="M:ASE_Assignment.Shape.#ctor">
            <summary>
            Generic shape constructor
            </summary>
        </member>
        <member name="T:ASE_Assignment.Triangle">
            <summary>
            Triangle: Used to instanciate triangle objects with valid parameters
            </summary>
        </member>
        <member name="M:ASE_Assignment.Triangle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Triangle object constructor
            </summary>
            <param name="colour">Fill colour</param>
            <param name="penColour">Outline colour</param>
            <param name="x">X1 Location</param>
            <param name="y">Y1 Location</param>
            <param name="x2">Point 2 X</param>
            <param name="y2">Point 2 Y</param>
            <param name="x3">Point 3 X</param>
            <param name="y3">Point 3 Y</param>
        </member>
        <member name="M:ASE_Assignment.Triangle.Draw(System.Drawing.Graphics)">
            <summary>
            Draw given triangle onto a panel
            </summary>
            <param name="g">Graphics panel to draw onto</param>
        </member>
        <member name="T:ASE_Assignment.Variable">
            <summary>
            Variable: Object variable containing label and value.
            </summary>
        </member>
        <member name="T:ASE_Assignment.Window">
            <summary>
            Window: This Class manages all interaction from the use with the applciation.
            </summary>
        </member>
        <member name="F:ASE_Assignment.Window.g">
            <summary>
            The graphics panel that the pointer draws onto.
            </summary>
        </member>
        <member name="F:ASE_Assignment.Window.commands">
            <summary>
            The list of all commands entered
            </summary>
        </member>
        <member name="F:ASE_Assignment.Window.ifCommands">
            <summary>
            The list of all commands encapsulated in the current IF statement
            </summary>
        </member>
        <member name="F:ASE_Assignment.Window.loopCommands">
            <summary>
            The list of all commands encapsulated in the current loop statement
            </summary>
        </member>
        <member name="F:ASE_Assignment.Window.methodCommands">
            <summary>
            The list of all commands encapsulated in the current method statement
            </summary>
        </member>
        <member name="M:ASE_Assignment.Window.#ctor">
            <summary>
            Initalise window object.
            </summary>
        </member>
        <member name="M:ASE_Assignment.Window.enterButton_Click(System.Object,System.EventArgs)">
            <summary>
            Called when enter button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.Execute">
            <summary>
            Takes the commands from the command list and runs them through the correct function based on type.
            </summary>
        </member>
        <member name="M:ASE_Assignment.Window.operationChecker(ASE_Assignment.Command)">
            <summary>
            Check the command to see if it is an operational commmand or a drawing command.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:ASE_Assignment.Window.ifChecker(System.String)">
            <summary>
            Checks the syntax of if commands
            </summary>
            <param name="ifCommand"></param>
        </member>
        <member name="M:ASE_Assignment.Window.SetCommands(System.String)">
            <summary>
            Sets the text in the command box
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:ASE_Assignment.Window.LoadButton_Clicked(System.Object,System.EventArgs)">
            <summary>
            Called on load button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.SaveButton_Clicked(System.Object,System.EventArgs)">
            <summary>
            Called on save button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.quitButton_Clicked(System.Object,System.EventArgs)">
            <summary>
            Called when quit button clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.executeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Called when execute button clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.clearButton_Click(System.Object,System.EventArgs)">
            <summary>
            Called when clear button clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.clearMethod_Click(System.Object,System.EventArgs)">
            <summary>
            Called when clear method clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.clearScreen_Click(System.Object,System.EventArgs)">
            <summary>
            Called when clear screen clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Assignment.Window.clearVars_Click(System.Object,System.EventArgs)">
            <summary>
            Called when clear variables is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ASE_Assignment.Window.components">
            <summary>
             Required designer variable.
            </summary>
        </member>
        <member name="M:ASE_Assignment.Window.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ASE_Assignment.Window.InitializeComponent">
            <summary>
             Required method for Designer support - do not modify
             the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
